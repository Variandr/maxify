generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PAID
  UNPAID
  IN_PROGRESS
}

enum DeliveryStatus {
  DELIVERED
  NOT_DELIVERED
  IN_THE_WAY
}

enum Role {
  USER
  ADMIN
  OWNER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model order {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @default(now()) @updatedAt @map("updated_at")
  organizationId String         @map("organization_id")
  totalPrice     Int?           @map("total_price")
  discount       Int?
  status         OrderStatus    @default(PAID)
  deliveryStatus DeliveryStatus @default(DELIVERED) @map("delivery_status")
  clientId       String?        @map("client_id")
  product        Json

  client         client?        @relation(fields: [clientId], references: [id])
  organization   organization?  @relation(fields: [organizationId], references: [id])

  @@map("orders")
}

model client {
  id       String  @id @default(uuid())
  name     String
  address  String?
  location String?
  order    order[]

  @@map("clients")
}

model category {
  id      String    @id @default(uuid())
  name    String
  product product[]
  @@map("categories")
}

model product {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @default(now()) @updatedAt @map("updated_at")
  organizationId String        @map("organization_id")
  categoryId     String?       @map("category_id")
  description    String?
  name           String
  price          Int

  organization   organization? @relation(fields: [organizationId], references: [id])
  category       category?     @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model organization {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now()) @map("created_at")
  name        String
  logoUrl     String?    @map("logo_url")
  description String?
  totalIncome Int?       @map("total_income")
  employee    employee[]
  income      income[]
  product     product[]
  order       order[]

  @@map("organizations")
}

model income {
  id             String   @id @default(uuid())
  date           DateTime
  income         Int
  organizationId String   @map("organization_id")

  organization organization @relation(fields: [organizationId], references: [id])

  @@map("incomes")
}

model employee {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now()) @map("created_at")
  position       String
  salary         Int
  organizationId String   @map("organization_id")
  profileId      String   @map("profile_id")

  organization organization @relation(fields: [organizationId], references: [id])
  profile      profile      @relation(fields: [profileId], references: [id])

  @@map("employees")
}

model profile {
  id          String  @id @default(uuid())
  email       String  @unique
  name        String
  surname     String?
  age         Int?
  role        Role    @default(USER)
  password    String
  phoneNumber String? @map("phone_number")
  gender      Gender?
  birthday    DateTime?
  address     String?
  city        String?
  avatarUrl   String? @map("avatar_url")

  employee employee[]

  @@map("profiles")
}
